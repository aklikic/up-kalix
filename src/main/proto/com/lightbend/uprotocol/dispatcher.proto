// The dispatcher is fundamentally two actions:
//  - one which subscribes to "dispatcher-in"
//  - one which publishes to "dispatcher-out"
// See the Kalix uProtocol Envelope for details on wrapping uProtocol CloudEvents
//  in Kalix CloudEvents

syntax = "proto3";

package com.lightbend.uprotocol;

import "com/lightbend/uprotocol/model/cloudevent.proto";
import "com/lightbend/uprotocol/model/common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "kalix/annotations.proto";
import "google/api/annotations.proto";

service Dispatcher {
  option (kalix.codegen) = {
    action: {}
  };

  rpc VehicleIn(google.protobuf.BytesValue) returns (google.protobuf.Empty) {
    option (kalix.method).eventing.in = {
      topic: "vehicle-in"
    };
    option (google.api.http) = {
      post: "/dispatcher/vehicle-in"
      body: "*"
    };
  }

  rpc VehicleOut(PublishUMessage) returns (google.protobuf.BytesValue) {
    option (kalix.method).eventing.out = {
      topic: "vehicle-out"
    };
  }

  rpc CloudServiceIn(google.protobuf.BytesValue) returns (google.protobuf.Empty) {
    option (kalix.method).eventing.in = {
      topic: "cloudservice-in"
    };
    option (google.api.http) = {
      post: "/dispatcher/cloudservice-in"
      body: "*"
    };
  }
  rpc CloudServiceOut1(PublishUMessage) returns (google.protobuf.BytesValue) {
    option (kalix.method).eventing.out = {
      topic: "cloudservice-out-1"
    };
  }
  rpc CloudServiceOut2(PublishUMessage) returns (google.protobuf.BytesValue) {
    option (kalix.method).eventing.out = {
      topic: "cloudservice-out-2"
    };
  }
}

message PublishUMessage {
  com.lightbend.uprotocol.model.common.UMessage msg = 1;

  // If unspecified, and the message specifies a sink
  optional com.lightbend.uprotocol.model.common.UUri envelope_to = 2;
}
